scalar DateTime

type User {
    id: ID!
    email: String!
}

type MeetingRoom {
    id: ID!
    roomNumber: Int!
    calendar: [Meeting]!
    description: String
}

type Meeting {
    id: ID!
    room: MeetingRoom!
    host: User!
    startsAt: DateTime!
    endsAt: DateTime!
  status: MeetingStatus!
}

enum MeetingStatus {
  SCHEDULED
  CANCELLED
}

type Query {
    me: User
    meetingRooms: [MeetingRoom]!
    myMeetings: [Meeting]!
}

type Mutation {
    signIn(email: String! password: String!): String!
    createMeeting(input: MeetingInput!): Meeting
    createMeetingRoom(input: MeetingRoomInput!): MeetingRoom
  cancelMeeting(meetingId: ID!): Boolean
}

input MeetingInput {
    roomId: ID!
    startsAt: DateTime!
    endsAt: DateTime!
}

input MeetingRoomInput {
    roomNumber: Int!
    description: String
}